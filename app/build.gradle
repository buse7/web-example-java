/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
  allureVersion = '2.22.0'
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.seleniumhq.selenium:selenium-java:4.11.0'
    implementation 'io.github.bonigarcia:webdrivermanager:5.4.1'
    implementation 'org.slf4j:slf4j-api:2.0.5'
    implementation 'ch.qos.logback:logback-classic:1.4.5'
    implementation 'org.testng:testng:7.8.0'
    implementation 'io.qameta.allure:allure-testng:2.24.0'
    implementation 'io.appium:java-client:8.5.1'
    implementation 'ws.schild:jave-all-deps:3.3.1'
    implementation 'com.microsoft.playwright:playwright:1.38.0'
    implementation fileTree('libs')
}

def suite = project.hasProperty("suite")

test {
  useTestNG() {
    dependsOn cleanTest
    useDefaultListeners = false

    if(suite) {
      suites "src/test/resources/SampleTestSuite.xml"
    }

    
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

ext.profile = (!project.hasProperty("profile") || !profile) ? 'prod' : profile
sourceSets {
  test {
    resources {
      srcDirs "src/test/resources", "src/test/resources-${profile}"
    }
  }
}

task executeAllure {
  doLast { 
    exec {
      workingDir '.'
      commandLine 'allure', 'serve', '-h', 'localhost', './build/allure-results'
    }
  }
}

tasks.withType(Copy).all { duplicatesStrategy 'exclude' }
